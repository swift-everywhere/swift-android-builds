name: buildbot
on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - '.codecov.yml'
      - '.github/workflows/builbot.yml'

permissions:
  # Give the default GITHUB_TOKEN write permission to commit and push the
  # added or changed files to the repository.
  contents: write

concurrency:
  group: builtbot
  #-${{ github.ref }}
  cancel-in-progress: true

jobs:
  buildbot:
    runs-on: ${{ matrix.os }}
    strategy: 
      fail-fast: false
      matrix:
        #os: ['ubuntu-24.04', 'ubuntu-22.04', 'macos-14', 'macos-15', 'windows-latest']
        # TODO: Windows (needs bash support)
        os: ['ubuntu-24.04', 'ubuntu-22.04', 'macos-14', 'macos-15']
    steps:
      - name: Setup Android Toolchain
        if: ${{ matrix.os == 'ubuntu-24.04' }}
        id: setup-toolchain-android
        uses: skiptools/swift-android-action@main
        with:
          # just set up the toolchain and don't build anything
          build-package: false

      - name: Setup Windows Toolchain
        if: ${{ matrix.os == 'windows-latest' }}
        id: setup-toolchain-windows
        uses: compnerd/gha-setup-swift@main
        with:
          branch: swift-6.0.2-release
          tag: 6.0.2-RELEASE

      - name: Setup Toolchain
        id: setup-platform
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == 'ubuntu-24.04' ]; then
            echo 'platform=android' >> $GITHUB_OUTPUT
            echo 'buildcmd=${{ steps.setup-toolchain-android.outputs.swift-build }}' >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == 'ubuntu-22.04' ]; then
            echo 'platform=linux' >> $GITHUB_OUTPUT
            echo 'buildcmd=swift build' >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == 'windows-latest' ]; then
            echo 'platform=windows' >> $GITHUB_OUTPUT
            echo 'buildcmd=swift build' >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == 'macos-14' ]; then
            echo 'platform=macos' >> $GITHUB_OUTPUT
            echo 'buildcmd=swift build' >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == 'macos-15' ]; then
            echo 'platform=ios' >> $GITHUB_OUTPUT
            echo 'DEVELOPER_DIR=/Applications/Xcode-16.2.0.app xcrun xcodebuild -skipMacroValidation -skipPackagePluginValidation -derivedDataPath .derivedData build -destination generic/platform=iOS -scheme "$(xcodebuild -list -json | jq -r '.workspace.schemes | sort_by(.) | reverse | .[0]')"' >> $GITHUB_OUTPUT
          else
            echo "::error::Unsupported platform: ${{ matrix.os }}"
            exit 1
          endif

      - name: Clone
        uses: actions/checkout@v4
        with:
          path: swift-android-builds

      - name: Configure git push
        shell: bash
        working-directory: swift-android-builds
        run: |
          # git config so we can push to the repository
          git config user.email "github-action@users.noreply.github.com"
          git config user.name "GitHub Action"
          git config user.password "${{ secrets.GITHUB_TOKEN }}"

      - name: Build packages
        shell: bash
        run: |
          #set -x
          set -o pipefail
          PACKAGES="swift-android-builds/index/packages.json"
          INDEX="swift-android-builds/index/${{ steps.setup-platform.outputs.platform }}"
          ls "${INDEX}"
          echo "Packages in ${INDEX}: "$(jq 'length' ${INDEX})
          mkdir repositories
          mkdir logs

          for REPO in $(cat ${PACKAGES} | jq -r '.[]' | sort -R | head -n 100) ; do
            DIR=$(echo "${REPO}" | cut -f 4- -d '/' | sed 's;.git$;;g')
            echo "Building: ${REPO} (https://swiftpackageindex.com/${DIR})"
            mkdir -p logs/"${DIR}"

            # reset from previous run
            EXITCODE=0

            START=$(date +%s)
            (git clone --depth=1 "${REPO}" repositories/"${DIR}" && ${{ steps.setup-platform.outputs.buildcmd }} -c debug --package-path repositories/"${DIR}") | tee logs/"${DIR}"/buildlog.txt && echo EXITCODE=0 || EXITCODE=$?
            END=$(date +%s)
            DURATION=$[END - START]

            if [ $EXITCODE == 0 ]; then
              echo "SUCCESS: ${REPO} in ${DURATION}"
              STATUS="success"
            else
              echo "FAILED: ${REPO} ($EXITCODE) in ${DURATION}"
              STATUS="failure"
            fi

            # clean out the repository after building
            rm -rf repositories/"${DIR}"

            # create a record of the package if it doesn't already exist
            jq --arg DIR "${DIR}" --arg REPO "${REPO}" '.[$DIR] |= if . == null then {"repo": $REPO, "created": (now | todate)} else . end' ${INDEX} > ${INDEX}.new && mv ${INDEX}.new ${INDEX}

            # update the status of the build
            jq --arg DIR "$DIR" --arg STATUS "$STATUS" '.[$DIR]."status" = $STATUS' $INDEX > $INDEX.new && mv $INDEX.new $INDEX
            # set the build time
            jq --arg DIR "$DIR" --arg REPO "$REPO" '.[$DIR]."modified" = (now | todate)' $INDEX > $INDEX.new && mv $INDEX.new $INDEX
            # save the runid to refer to build logs
            jq --arg DIR "$DIR" --arg RUNID "${{ github.run_id }}" '.[$DIR]."runid" = ($RUNID | tonumber)' $INDEX > $INDEX.new && mv $INDEX.new $INDEX
            # save the build duration
            jq --arg DIR "$DIR" --arg DURATION "$DURATION" '.[$DIR]."duration" = ($DURATION | tonumber)' $INDEX > $INDEX.new && mv $INDEX.new $INDEX

            # we could compact the JSON, but it is nice to be able to
            # see the line-by-line commit history when a package
            # has been added or updated
            #jq --compact-output --sort-keys '.' $INDEX > $INDEX.new && mv $INDEX.new $INDEX
            # ensure keys are sorted
            jq --sort-keys '.' $INDEX > $INDEX.new && mv $INDEX.new $INDEX

            # output the JSON for debugging
            #jq --color-output --sort-keys '.' $INDEX

            cd $(dirname ${INDEX})

            # fetch any changes that may have occured since we last updated
            git pull
            git diff $(basename $INDEX)
            git add $(basename $INDEX)
            git commit -m "Build $STATUS for $REPO" .
            git push
            cd -
          done

